{"version":3,"sources":["Movie.js","App.js","registerServiceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","large_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","potato","json","data","catch","err","console","log","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6f910f37.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis'\nimport './Movie.css';\n\nfunction Movie({\n    title,\n    poster,\n    genres,\n    synopsis\n}) {\n    return ( <\n            div className = \"Movie\" >\n            <\n            div className = \"Movie__Column\" >\n            <\n            MoviePoster poster = {\n                poster\n            }\n            alt = {\n                title\n            }\n            /> < /\n            div > <\n            div className = \"Movie__Column\" >\n            <\n            h1 > {\n                title\n            } < /h1> <\n            div className = \"Movie__Genres\" > {\n                genres.map((genre, index) => < MovieGenre genre = {\n                        genre\n                    }\n                    key = {\n                        index\n                    }\n                    />)} < /\n                    div > <\n                    div className = \"Movie__Synopsis\" >\n                    <\n                    LinesEllipsis text = {\n                        synopsis\n                    }\n                    maxLine = '3'\n                    ellipsis = '...'\n                    trimRight basedOn = 'letters' /\n                    >\n                    <\n                    /div> < /\n                    div > <\n                    /div>\n                )\n            }\n\n            function MoviePoster({\n                poster,\n                alt\n            }) {\n                return ( <\n                    img src = {\n                        poster\n                    }\n                    alt = {\n                        alt\n                    }\n                    title = {\n                        alt\n                    }\n                    className = \"Movie__Poster\" / >\n                )\n            }\n\n            function MovieGenre({\n                genre\n            }) {\n                return ( <\n                    span className = \"Movie__Genre\" > {\n                        genre\n                    } < /span>\n                )\n            }\n\n            Movie.propTypes = {\n                title: PropTypes.string.isRequired,\n                poster: PropTypes.string.isRequired,\n                genres: PropTypes.array.isRequired,\n                synopsis: PropTypes.string.isRequired\n            }\n\n            MoviePoster.propTypes = {\n                poster: PropTypes.string.isRequired,\n                alt: PropTypes.string.isRequired\n            }\n\n            MovieGenre.propTypes = {\n                genre: PropTypes.string.isRequired\n            }\n\n            export default Movie","import React, {\n  Component\n} from \"react\";\nimport \"./App.css\";\nimport Movie from \"./Movie\";\n\nclass App extends Component {\n  // Render: componentWillMount() -> render() -> componentDidMount()\n  // Update componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> componentDidUpdate()\n\n  state = {};\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return ( <\n        Movie title = {\n          movie.title_english\n        }\n        poster = {\n          movie.large_cover_image\n        }\n        key = {\n          movie.id\n        }\n        genres = {\n          movie.genres\n        }\n        synopsis = {\n          movie.synopsis\n        }\n        />\n      );\n    });\n    return movies;\n  };\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    });\n  };\n\n  _callApi = () => {\n    return fetch(\n        \"https://yts.am/api/v2/list_movies.json?sort_by=download_count\"\n      )\n      .then(potato => potato.json())\n      .then(json => json.data.movies)\n      .catch(err => console.log(err));\n  };\n\n  render() {\n    const {\n      movies\n    } = this.state;\n    return ( <\n      div className = {\n        movies ? \"App\" : \"App--loading\"\n      } > {\n        movies ? this._renderMovies() : \"Loading\"\n      } <\n      /div>\n    );\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (!isLocalhost) {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            } else {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}